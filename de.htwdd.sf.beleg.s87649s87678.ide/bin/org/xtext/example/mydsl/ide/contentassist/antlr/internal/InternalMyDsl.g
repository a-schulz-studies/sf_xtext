/*
 * generated by Xtext 2.33.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleS
entryRuleS
:
{ before(grammarAccess.getSRule()); }
	 ruleS
{ after(grammarAccess.getSRule()); } 
	 EOF 
;

// Rule S
ruleS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSAccess().getGroup()); }
		(rule__S__Group__0)
		{ after(grammarAccess.getSAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitel
entryRuleTitel
:
{ before(grammarAccess.getTitelRule()); }
	 ruleTitel
{ after(grammarAccess.getTitelRule()); } 
	 EOF 
;

// Rule Titel
ruleTitel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitelAccess().getGroup()); }
		(rule__Titel__Group__0)
		{ after(grammarAccess.getTitelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleY
entryRuleY
:
{ before(grammarAccess.getYRule()); }
	 ruleY
{ after(grammarAccess.getYRule()); } 
	 EOF 
;

// Rule Y
ruleY 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getYAccess().getGroup()); }
		(rule__Y__Group__0)
		{ after(grammarAccess.getYAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNutzen
entryRuleNutzen
:
{ before(grammarAccess.getNutzenRule()); }
	 ruleNutzen
{ after(grammarAccess.getNutzenRule()); } 
	 EOF 
;

// Rule Nutzen
ruleNutzen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNutzenAccess().getVAssignment()); }
		(rule__Nutzen__VAssignment)
		{ after(grammarAccess.getNutzenAccess().getVAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerbNutzen
entryRuleVerbNutzen
:
{ before(grammarAccess.getVerbNutzenRule()); }
	 ruleVerbNutzen
{ after(grammarAccess.getVerbNutzenRule()); } 
	 EOF 
;

// Rule VerbNutzen
ruleVerbNutzen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerbNutzenAccess().getAlternatives()); }
		(rule__VerbNutzen__Alternatives)
		{ after(grammarAccess.getVerbNutzenAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbNutzenAccess().getGroup_0()); }
		(rule__VerbNutzen__Group_0__0)
		{ after(grammarAccess.getVerbNutzenAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getVerbNutzenAccess().getVAssignment_1()); }
		(rule__VerbNutzen__VAssignment_1)
		{ after(grammarAccess.getVerbNutzenAccess().getVAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getVerbNutzenAccess().getVAssignment_2()); }
		(rule__VerbNutzen__VAssignment_2)
		{ after(grammarAccess.getVerbNutzenAccess().getVAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getVerbNutzenAccess().getVAssignment_3()); }
		(rule__VerbNutzen__VAssignment_3)
		{ after(grammarAccess.getVerbNutzenAccess().getVAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__S__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__S__Group__0__Impl
	rule__S__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__S__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSAccess().getTitelParserRuleCall_0()); }
	ruleTitel
	{ after(grammarAccess.getSAccess().getTitelParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__S__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__S__Group__1__Impl
	rule__S__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__S__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getSAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__S__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__S__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__S__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSAccess().getSentenceAssignment_2()); }
	(rule__S__SentenceAssignment_2)
	{ after(grammarAccess.getSAccess().getSentenceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Titel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Titel__Group__0__Impl
	rule__Titel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Titel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitelAccess().getSAssignment_0()); }
	(rule__Titel__SAssignment_0)
	{ after(grammarAccess.getTitelAccess().getSAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Titel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Titel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Titel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitelAccess().getVAssignment_1()); }
	(rule__Titel__VAssignment_1)
	{ after(grammarAccess.getTitelAccess().getVAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Y__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__0__Impl
	rule__Y__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getUmKeyword_0()); }
	'Um'
	{ after(grammarAccess.getYAccess().getUmKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__1__Impl
	rule__Y__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getSAssignment_1()); }
	(rule__Y__SAssignment_1)
	{ after(grammarAccess.getYAccess().getSAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__2__Impl
	rule__Y__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getNAssignment_2()); }
	(rule__Y__NAssignment_2)
	{ after(grammarAccess.getYAccess().getNAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__3__Impl
	rule__Y__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getMöchteIchAlsKeyword_3()); }
	', m\u00F6chte ich als'
	{ after(grammarAccess.getYAccess().getMöchteIchAlsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__4__Impl
	rule__Y__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getRAssignment_4()); }
	(rule__Y__RAssignment_4)
	{ after(grammarAccess.getYAccess().getRAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__5__Impl
	rule__Y__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getZielAssignment_5()); }
	(rule__Y__ZielAssignment_5)
	{ after(grammarAccess.getYAccess().getZielAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__6__Impl
	rule__Y__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getWunschAssignment_6()); }
	(rule__Y__WunschAssignment_6)
	{ after(grammarAccess.getYAccess().getWunschAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Y__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getYAccess().getFullStopKeyword_7()); }
	'.'
	{ after(grammarAccess.getYAccess().getFullStopKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VerbNutzen__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbNutzen__Group_0__0__Impl
	rule__VerbNutzen__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbNutzenAccess().getZuKeyword_0_0()); }
	'zu'
	{ after(grammarAccess.getVerbNutzenAccess().getZuKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerbNutzen__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerbNutzenAccess().getVAssignment_0_1()); }
	(rule__VerbNutzen__VAssignment_0_1)
	{ after(grammarAccess.getVerbNutzenAccess().getVAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__S__SentenceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSAccess().getSentenceYParserRuleCall_2_0()); }
		ruleY
		{ after(grammarAccess.getSAccess().getSentenceYParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Titel__SAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitelAccess().getSSubstTerminalRuleCall_0_0()); }
		RULE_SUBST
		{ after(grammarAccess.getTitelAccess().getSSubstTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Titel__VAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitelAccess().getVVerbTerminalRuleCall_1_0()); }
		RULE_VERB
		{ after(grammarAccess.getTitelAccess().getVVerbTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__SAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getSSubstTerminalRuleCall_1_0()); }
		RULE_SUBST
		{ after(grammarAccess.getYAccess().getSSubstTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__NAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getNNutzenParserRuleCall_2_0()); }
		ruleNutzen
		{ after(grammarAccess.getYAccess().getNNutzenParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__RAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getRSubstTerminalRuleCall_4_0()); }
		RULE_SUBST
		{ after(grammarAccess.getYAccess().getRSubstTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__ZielAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getZielSubstTerminalRuleCall_5_0()); }
		RULE_SUBST
		{ after(grammarAccess.getYAccess().getZielSubstTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Y__WunschAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getYAccess().getWunschVerbTerminalRuleCall_6_0()); }
		RULE_VERB
		{ after(grammarAccess.getYAccess().getWunschVerbTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nutzen__VAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNutzenAccess().getVVerbNutzenParserRuleCall_0()); }
		ruleVerbNutzen
		{ after(grammarAccess.getNutzenAccess().getVVerbNutzenParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__VAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbNutzenAccess().getVVerbOhneZuTerminalRuleCall_0_1_0()); }
		RULE_VERBOHNEZU
		{ after(grammarAccess.getVerbNutzenAccess().getVVerbOhneZuTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__VAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbNutzenAccess().getVVerbMitEinemZuTerminalRuleCall_1_0()); }
		RULE_VERBMITEINEMZU
		{ after(grammarAccess.getVerbNutzenAccess().getVVerbMitEinemZuTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__VAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbNutzenAccess().getVVerbMitZweiZuTerminalRuleCall_2_0()); }
		RULE_VERBMITZWEIZU
		{ after(grammarAccess.getVerbNutzenAccess().getVVerbMitZweiZuTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerbNutzen__VAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbNutzenAccess().getVVerbMitDreiZuTerminalRuleCall_3_0()); }
		RULE_VERBMITDREIZU
		{ after(grammarAccess.getVerbNutzenAccess().getVVerbMitDreiZuTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_SUBST : ('A'..'Z'|'\u00C4'|'\u00D6'|'\u00DC') ('a'..'z'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF')*;

RULE_VERB : (('a'..'z'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF')* 'en'|'ern'|'eln');

RULE_VERBOHNEZU : (RULE_NOZU* 'en'|'ern'|'eln');

fragment RULE_NOZU : (RULE_ALLEBUCHSTABEN RULE_KEINU|RULE_KEINZ RULE_ALLEBUCHSTABEN);

fragment RULE_ALLEBUCHSTABEN : ('a'..'z'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF');

fragment RULE_KEINU : ('a'..'t'|'v'..'z'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF');

fragment RULE_KEINZ : ('a'..'y'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF');

RULE_VERBMITEINEMZU : (RULE_Z RULE_U RULE_NOZU* 'en'|'ern'|'eln');

fragment RULE_Z : 'z';

fragment RULE_U : 'u';

RULE_VERBMITZWEIZU : (RULE_Z RULE_U RULE_Z RULE_U RULE_NOZU* 'en'|'ern'|'eln');

RULE_VERBMITDREIZU : (RULE_Z RULE_U RULE_Z RULE_U RULE_Z RULE_U RULE_NOZU* 'en'|'ern'|'eln');

RULE_TWOCHARS : (RULE_NOZ|RULE_NOZU);

fragment RULE_NOZ : ('a'..'y'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF');

fragment RULE_ZBUTNOU : ('a'..'z'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF') ('a'..'t'|'v'..'z'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF');

fragment RULE_NOU : ('a'..'t'|'v'..'z'|'\u00E4'|'\u00F6'|'\u00FC'|'\u00DF');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
